{"version":3,"sources":["Components/Timer.js","Components/Task.js","containers/taskTest.js","Components/Item.js","Components/List.js","Components/Classes/Class.js","App.js","serviceWorker.js","redux/reducers/index.js","index.js"],"names":["Timer","props","handleMinutes","state","minutes","i","timer","setInterval","setState","started","clearInterval","isOn","a","this","call","className","React","Component","Task","placeholder","required","id","type","onClick","funcion","value","Item","removeTask","key","_reactInternalFiber","removeTaskByKey","task","func","bind","List","dados","map","Tasks","status","Math","floor","random","App","handleTimer","self","setTimeout","console","log","array","index","findIndex","x","splice","getTextValue","returnTextValue","minute","newTask","setTask","prevState","document","getElementById","Boolean","window","location","hostname","match","reducerItem","action","Object","assign","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bb8b7ad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      minutes: 10,\r\n      isOn: false,\r\n      started: false\r\n    }\r\n  }\r\n\r\n  handleMinutes = () => {\r\n    const count = this.state.minutes\r\n    let i = 10\r\n    let timer = setInterval(() => {\r\n      i--\r\n      if(i < 0) {\r\n\r\n        // Quando o tempo chega a 0, o cronometro é liberado\r\n        this.setState({minutes: 10, started: false})\r\n\r\n        clearInterval(timer)\r\n      } else {\r\n\r\n        this.setState(state => {\r\n          return {minutes: state.minutes - 1}\r\n        })\r\n\r\n      }\r\n\r\n    }, 1000)\r\n\r\n    \r\n  }\r\n\r\n  componentWillReceiveProps(a){\r\n\r\n    const {started } = this.state\r\n\r\n\r\n    // State muda apenas quando  props true e state false\r\n    // Correção para o setInterval\r\n    if(a.isOn && !started) {\r\n\r\n      this.setState({started: true}, this.handleMinutes.call())\r\n\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"timer-container\">\r\n      <div className=\"timer-numbers\">\r\n      <span>00:</span><span>{this.state.minutes}</span>\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport FilterLink from '../containers/taskTest'\r\n\r\n\r\nfunction Task (props) {\r\n  return (\r\n  <div>\r\n    <div className=\"task-container\">\r\n      <div className=\"task-box\">\r\n      <FilterLink />\r\n        <input  placeholder=\"Digite o nome da tarefa\" required id=\"text\" type=\"text\"/>\r\n        <input type=\"button\" onClick={props.funcion} value=\"Enviar\"/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Task\r\n","/*\r\n  Conexão entre store e componentes\r\n */\r\n\r\nimport { connect } from 'react-redux'\r\nimport { addItem } from '../redux/actions'\r\nimport Task from '../Components/Task'\r\n\r\n\r\nconst FilterLink = \"ppppppppppppppp\"\r\n // = connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(Task)\r\n//\r\nexport default FilterLink\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Item extends React.Component {\r\n  /* função pega a key deste componente e executa a função do\r\n  componente Pai que deleta o item correspondente */\r\n\r\n  removeTask = () => {\r\n    const {key} = this._reactInternalFiber\r\n    this.props.removeTaskByKey(key)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n      <tr>\r\n      <td>{this.props.task}</td>\r\n      <td><input type=\"button\" onClick={this.props.func.bind(this)} value=\"Play\"/></td>\r\n      <td><input type=\"button\" onClick={this.removeTask} value=\"Remover\"/></td>\r\n      </tr>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Item\r\n","import React from 'react';\r\nimport Item from './Item';\r\n\r\nclass List extends React.Component {\r\n\r\n  render (){\r\n\r\n    return (\r\n    <div>\r\n      <div className=\"list-container\">\r\n        <div className=\"box-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td>\r\n                  <h2>Tarefas</h2>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                this.props.dados.map(a => a).map((a) =>\r\n                <Item removeTaskByKey={this.props.removeTaskByKey} func={this.props.func} key={a.key} task={a.task}/>\r\n\r\n                )\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default List;\r\n","class Tasks {\r\n  constructor() {\r\n    this.task = \"\"\r\n    this.status = \"Pendente\"\r\n    this.key = Math.floor(Math.random() * 6E9)\r\n  }\r\n\r\nsetTask(task){\r\n    if (task === \"\") {\r\n      this.task = \"Tarefa sem nome\"\r\n    } else {\r\n      this.task = task\r\n    }\r\n  }\r\n}\r\n\r\nexport default Tasks\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Timer from './Components/Timer';\r\nimport Task from './Components/Task';\r\nimport List from './Components/List';\r\nimport Tasks from './Components/Classes/Class';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //atributo do objeto = método do objeto\r\n    this.getTextValue = this.getTextValue.bind(this);\r\n    this.returnTextValue = this.returnTextValue.bind(this);\r\n    this.state = {dados: [], minute : 0, isOn: false, started: false};\r\n  }\r\n\r\n  // Pega o valor (string) da input e cria um novo item na lista\r\n  getTextValue() {\r\n    let newTask = new Tasks()\r\n    newTask.setTask(this.returnTextValue('text'))\r\n    this.setState(prevState => ({\r\n      dados: [...prevState.dados, newTask]}));\r\n    }\r\n\r\n    // Pegar valor da input\r\n    returnTextValue (id){\r\n      let value = '';\r\n      let obj = document.getElementById(id);\r\n      value = obj.value;\r\n      return value;\r\n    }\r\n\r\n    // relogio parado > isOn false vira true e depois false (props mudam)\r\n    // relogio true no timer não executa função se isOn && started\r\n    // quando o timer zerar, o started é false, o que permite outro ciclo\r\n    handleTimer = () => {\r\n\r\n      const { isOn, started } = this.state\r\n      const self = this\r\n\r\n      // criar um estado\r\n      //ao ser invocado, trocar estado isOn para true\r\n      this.setState({isOn: true})\r\n      setTimeout(function () {\r\n        self.setState({isOn: false})\r\n      }, 1000);\r\n    }\r\n\r\n    // função para deletar objetos do array pelo key\r\n    removeTaskByKey = (a) => {\r\n      console.log(a);\r\n\r\n      let array = [...this.state.dados]\r\n      var index = array.findIndex(x => x.key == a)\r\n\r\n      array.splice(index, 1)\r\n      this.setState({dados: array})\r\n    }\r\n\r\n    render () {\r\n      const { isOn, minute, dados} = this.state\r\n\r\n      return (\r\n        <div className=\"App\">\r\n        <Timer isOn={isOn} minutes={minute} />\r\n        <Task funcion={this.getTextValue}/>\r\n        <List removeTaskByKey={this.removeTaskByKey} func={this.handleTimer.bind(this)} dados={dados} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// criar reducer\r\nfunction reducerItem(state = {}, action) {\r\n  switch (action.type) {\r\n    case 'ADD':\r\n      return Object.assign({}, action);\r\n\r\n\r\n    case 'REMOVE':\r\n      return console.log(state); // temporario\r\n    default:\r\n     return state;\r\n  }\r\n}\r\n\r\n\r\nexport default reducerItem\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\nimport reducerItem from './redux/reducers'\n\nconst store = createStore(reducerItem)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n"],"sourceRoot":""}