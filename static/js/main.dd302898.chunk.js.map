{"version":3,"sources":["containers/Timer.js","redux/actions/index.js","components/Task.js","components/Item.js","containers/Item.js","components/List.js","App.js","serviceWorker.js","redux/reducers/reducerItem.js","redux/reducers/reducerTimer.js","redux/reducers/index.js","index.js"],"names":["connect","state","timerConfig","reducerTimer","className","minutes","key","removeItem","id","type","Task","input","getTextValue","onSubmit","e","preventDefault","value","trim","ref","node","placeholder","Item","STORE","task","start","remove","reset","disabled","isOn","onClick","min","a","setInterval","call","clearInterval","dispatch","ID","List","props","this","dados","map","removeTaskByKey","func","React","Component","App","handleTimer","self","setState","setTimeout","store","bind","returnTextValue","minute","started","document","getElementById","reducerItem","Boolean","window","location","hostname","match","initialState","rootReducers","combineReducers","action","filter","todo","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd302898.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction Timer({ timerConfig }) {\r\n  return (\r\n    <div className=\"timer-container\">\r\n      <div className=\"timer-numbers\">\r\n        <span>00:</span><span>{timerConfig.minutes}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    timerConfig: state.reducerTimer\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Timer)","/* Adicionar funções e depois exportá-las */\r\n\r\nlet key = 0;\r\n\r\nexport function addItem(task) {\r\n  return {\r\n    type: 'ADD',\r\n    task: task,\r\n    id: key++\r\n  }\r\n}\r\n\r\nexport function removeItem(id) {\r\n  return {\r\n    type: 'REMOVE',\r\n    id\r\n  }\r\n}\r\n\r\nlet minutes = 45;\r\n\r\nexport function startTimer() {\r\n  return {\r\n    type: 'START_TIMER',\r\n    minutes: minutes--,\r\n    isOn: true\r\n  }\r\n}\r\n\r\nexport function resetTimer() {\r\n  minutes = 45;\r\n  return {\r\n    type: 'RESET_TIMER',\r\n    minutes: 10,\r\n    isOn: false\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../redux/actions';\r\n\r\nfunction Task({ getTextValue }) {\r\n  let input\r\n  return (\r\n    <div>\r\n      <div className=\"task-container\">\r\n        <div className=\"task-box\">\r\n          <form onSubmit={e => {\r\n            e.preventDefault()\r\n            if (!input.value.trim()) {\r\n              return\r\n            }\r\n\r\n            getTextValue()\r\n          }}>\r\n            <input ref={node => input = node} placeholder=\"Digite o nome da tarefa\" id=\"text\" type=\"text\" />\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// export default connect()(Task)\r\nexport default Task\r\n\r\n// #10 < input type = \"button\" onClick = { props.getTextValue } value = \"Enviar\" />\r\n","import React from 'react'\r\n\r\nfunction Item({STORE, task, start, remove, reset }) {\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td>{task}</td>\r\n        <td><input disabled={STORE.isOn ? true : false} type=\"button\" onClick={() => {\r\n            // ao clicar bloquear botão ok\r\n            //iniciar setinterval\r\n            let min = 50\r\n           let a = setInterval(() => {\r\n              start.call()\r\n              min--\r\n             if (min == 0) {\r\n               clearInterval(a)\r\n               reset.call()\r\n             }\r\n            }, 1000);\r\n            //no final clearinterval\r\n\r\n            \r\n            //desbloqueia botao\r\n            \r\n            \r\n        }} value=\"Play\" /></td>\r\n        <td><input type=\"button\" onClick={() => {\r\n\r\n          remove.call()\r\n\r\n        }} value=\"Remover\" /></td>\r\n      </tr>\r\n    </>\r\n  )\r\n}\r\n\r\n// <td><input type=\"button\" onClick={this.props.func.bind(this)} value=\"Play\" /></td>\r\n\r\nexport default Item\r\n","import Item from '../components/Item'\r\nimport { startTimer, resetTimer, removeItem } from '../redux/actions'\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        STORE: state.reducerTimer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, key) => {\r\n    return {\r\n        reset: () => { dispatch(resetTimer()) },\r\n        start: () => { dispatch(startTimer()) },\r\n        remove: () => { dispatch(removeItem(key.ID)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Item)","import React from 'react';\r\nimport Item from '../containers/Item';\r\n\r\nexport class List extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // this.startTimer = this.startTimer.bind(this)\r\n    // this.stopTimer = this.stopTimer.bind(this)\r\n    // this.removeTask = this.removeTask.bind(this)\r\n  }\r\n\r\n  render (){\r\n\r\n    return (\r\n    <div>\r\n      <div className=\"list-container\">\r\n        <div className=\"box-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td>\r\n                  <h2>Tarefas</h2>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                this.props.dados.map(a => a).map((a) =>\r\n                \r\n                <Item key={a.id} removeTaskByKey={this.props.removeTaskByKey} func={this.props.func} task={a.task} ID={a.id} />\r\n\r\n                )\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Timer from './containers/Timer';\r\nimport Task from './components/Task';\r\nimport { List } from './components/List'\r\nimport { connect } from 'react-redux';\r\nimport { addItem, removeItem } from './redux/actions'\r\n\r\nimport { store } from './'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //atributo do objeto = método do objeto\r\n    this.getTextValue = this.getTextValue.bind(this);\r\n    this.returnTextValue = this.returnTextValue.bind(this);\r\n    this.state = { dados: [], minute: 0, isOn: false, started: false };\r\n  }\r\n\r\n  // Pega o valor (string) da input e cria um novo item na lista\r\n  // Pegar o objeto e jogar na store do redux, não no state do react\r\n  getTextValue() {\r\n    let a = this.returnTextValue('text')\r\n    \r\n    \r\n    store.dispatch(addItem(a))\r\n    \r\n  }\r\n\r\n  // Pegar valor da input\r\n  returnTextValue(id) {\r\n    let value = '';\r\n    let obj = document.getElementById(id);\r\n    value = obj.value;\r\n    return value;\r\n  }\r\n\r\n  // relogio parado > isOn false vira true e depois false (props mudam)\r\n  // relogio true no timer não executa função se isOn && started\r\n  // quando o timer zerar, o started é false, o que permite outro ciclo\r\n  handleTimer = () => {\r\n    const self = this\r\n\r\n    // criar um estado\r\n    //ao ser invocado, trocar estado isOn para true\r\n    this.setState({ isOn: true })\r\n    setTimeout(function () {\r\n      self.setState({ isOn: false })\r\n    }, 1000);\r\n  }\r\n\r\n  // função para deletar objetos do array pelo key\r\n  removeTaskByKey = (a) => {\r\n    // console.log(a);\r\n    store.dispatch(removeItem(1))\r\n\r\n    // let array = [...this.state.dados]\r\n    // var index = array.findIndex(x => x.key == a)\r\n\r\n    // array.splice(index, 1)\r\n    // this.setState({dados: array})\r\n  }\r\n\r\n  render() {\r\n    const { isOn, minute } = this.state\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Timer isOn={isOn} minutes={minute} />\r\n        <Task getTextValue={this.getTextValue} />\r\n        <List removeTaskByKey={this.removeTaskByKey} func={this.handleTimer.bind(this)} dados={this.props.dados} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return { dados: store.reducerItem }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nconst initialState = []\r\n\r\nexport function reducerItem(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'ADD':\r\n            return [...state, {\r\n                id: action.id,\r\n                task: action.task\r\n            }]\r\n\r\n        case 'REMOVE':\r\n            return state.filter(todo =>\r\n                todo.id !== action.id\r\n            )\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n","const initialState = {\r\n    isOn: false,\r\n    minutes: 50,\r\n    started: false\r\n}\r\n\r\nexport function reducerTimer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'START_TIMER':\r\n            return {\r\n                minutes: action.minutes,\r\n                isOn: action.isOn\r\n            }\r\n        case 'RESET_TIMER':\r\n            return {\r\n                minutes: action.minutes,\r\n                isOn: action.isOn\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","// import\r\nimport { reducerItem } from './reducerItem'\r\nimport { reducerTimer } from './reducerTimer'\r\nimport { combineReducers } from 'redux'\r\n\r\nexport const rootReducers = combineReducers({reducerItem, reducerTimer});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\n\r\nimport {rootReducers} from './redux/reducers'\r\n\r\nexport const store = createStore(rootReducers)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, document.getElementById('root'));\r\n\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: https://bit.ly/CRA-PWA\r\n  serviceWorker.unregister();\r\n"],"sourceRoot":""}